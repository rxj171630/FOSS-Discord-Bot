{
  "_from": "node-fetch",
  "_id": "node-fetch@2.6.0",
  "_inBundle": false,
  "_integrity": "sha512-8dG4H5ujfvFiqDmVu9fQ5bOHUC15JMjMY/Zumv26oOvvVJjM67KF8koCWIabKQ1GJIa9r2mMZscBq/TbdOcmNA==",
  "_location": "/node-fetch",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "node-fetch",
    "fetchSpec": "latest",
    "name": "node-fetch",
    "raw": "node-fetch",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/discord.js"
  ],
  "_resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.0.tgz",
  "_shasum": "e633456386d4aa55863f676a7ab0daa8fdecb0fd",
  "_shrinkwrap": null,
  "_spec": "node-fetch",
  "_where": "/home/rahul/.local/lib/DiscordBot",
  "author": {
    "name": "David Frank"
  },
  "browser": "./browser.js",
  "bugs": {
    "url": "https://github.com/bitinn/node-fetch/issues"
  },
  "bundleDependencies": false,
  "dependencies": {},
  "deprecated": false,
  "description": "A light-weight module that brings window.fetch to node.js",
  "devDependencies": {
    "@ungap/url-search-params": "^0.1.2",
    "abort-controller": "^1.1.0",
    "abortcontroller-polyfill": "^1.3.0",
    "babel-core": "^6.26.3",
    "babel-plugin-istanbul": "^4.1.6",
    "babel-preset-env": "^1.6.1",
    "babel-register": "^6.16.3",
    "chai": "^3.5.0",
    "chai-as-promised": "^7.1.1",
    "chai-iterator": "^1.1.1",
    "chai-string": "~1.3.0",
    "codecov": "^3.3.0",
    "cross-env": "^5.2.0",
    "form-data": "^2.3.3",
    "is-builtin-module": "^1.0.0",
    "mocha": "^5.0.0",
    "nyc": "11.9.0",
    "parted": "^0.1.1",
    "promise": "^8.0.3",
    "resumer": "0.0.0",
    "rollup": "^0.63.4",
    "rollup-plugin-babel": "^3.0.7",
    "string-to-arraybuffer": "^1.0.2",
    "whatwg-url": "^5.0.0"
  },
  "engines": {
    "node": "4.x || >=6.0.0"
  },
  "files": [
    "browser.js",
    "lib/index.es.js",
    "lib/index.js",
    "lib/index.mjs"
  ],
  "homepage": "https://github.com/bitinn/node-fetch",
  "keywords": [
    "fetch",
    "http",
    "promise"
  ],
  "license": "MIT",
  "main": "lib/index",
  "module": "lib/index.mjs",
  "name": "node-fetch",
  "optionalDependencies": {},
  "readme": "node-fetch\r\n==========\r\n\r\n[![npm version][npm-image]][npm-url]\r\n[![build status][travis-image]][travis-url]\r\n[![coverage status][codecov-image]][codecov-url]\r\n[![install size][install-size-image]][install-size-url]\r\n\r\nA light-weight module that brings `window.fetch` to Node.js\r\n\r\n(We are looking for [v2 maintainers and collaborators](https://github.com/bitinn/node-fetch/issues/567))\r\n\r\n<!-- TOC -->\r\n\r\n- [Motivation](#motivation)\r\n- [Features](#features)\r\n- [Difference from client-side fetch](#difference-from-client-side-fetch)\r\n- [Installation](#installation)\r\n- [Loading and configuring the module](#loading-and-configuring-the-module)\r\n- [Common Usage](#common-usage)\r\n    - [Plain text or HTML](#plain-text-or-html)\r\n    - [JSON](#json)\r\n    - [Simple Post](#simple-post)\r\n    - [Post with JSON](#post-with-json)\r\n    - [Post with form parameters](#post-with-form-parameters)\r\n    - [Handling exceptions](#handling-exceptions)\r\n    - [Handling client and server errors](#handling-client-and-server-errors)\r\n- [Advanced Usage](#advanced-usage)\r\n    - [Streams](#streams)\r\n    - [Buffer](#buffer)\r\n    - [Accessing Headers and other Meta data](#accessing-headers-and-other-meta-data)\r\n    - [Extract Set-Cookie Header](#extract-set-cookie-header)\r\n    - [Post data using a file stream](#post-data-using-a-file-stream)\r\n    - [Post with form-data (detect multipart)](#post-with-form-data-detect-multipart)\r\n    - [Request cancellation with AbortSignal](#request-cancellation-with-abortsignal)\r\n- [API](#api)\r\n    - [fetch(url[, options])](#fetchurl-options)\r\n    - [Options](#options)\r\n    - [Class: Request](#class-request)\r\n    - [Class: Response](#class-response)\r\n    - [Class: Headers](#class-headers)\r\n    - [Interface: Body](#interface-body)\r\n    - [Class: FetchError](#class-fetcherror)\r\n- [License](#license)\r\n- [Acknowledgement](#acknowledgement)\r\n\r\n<!-- /TOC -->\r\n\r\n## Motivation\r\n\r\nInstead of implementing `XMLHttpRequest` in Node.js to run browser-specific [Fetch polyfill](https://github.com/github/fetch), why not go from native `http` to `fetch` API directly? Hence `node-fetch`, minimal code for a `window.fetch` compatible API on Node.js runtime.\r\n\r\nSee Matt Andrews' [isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch) or Leonardo Quixada's [cross-fetch](https://github.com/lquixada/cross-fetch) for isomorphic usage (exports `node-fetch` for server-side, `whatwg-fetch` for client-side).\r\n\r\n## Features\r\n\r\n- Stay consistent with `window.fetch` API.\r\n- Make conscious trade-off when following [WHATWG fetch spec][whatwg-fetch] and [stream spec](https://streams.spec.whatwg.org/) implementation details, document known differences.\r\n- Use native promise, but allow substituting it with [insert your favorite promise library].\r\n- Use native Node streams for body, on both request and response.\r\n- Decode content encoding (gzip/deflate) properly, and convert string output (such as `res.text()` and `res.json()`) to UTF-8 automatically.\r\n- Useful extensions such as timeout, redirect limit, response size limit, [explicit errors](ERROR-HANDLING.md) for troubleshooting.\r\n\r\n## Difference from client-side fetch\r\n\r\n- See [Known Differences](LIMITS.md) for details.\r\n- If you happen to use a missing feature that `window.fetch` offers, feel free to open an issue.\r\n- Pull requests are welcomed too!\r\n\r\n## Installation\r\n\r\nCurrent stable release (`2.x`)\r\n\r\n```sh\r\n$ npm install node-fetch --save\r\n```\r\n\r\n## Loading and configuring the module\r\nWe suggest you load the module via `require`, pending the stabalizing of es modules in node:\r\n```js\r\nconst fetch = require('node-fetch');\r\n```\r\n\r\nIf you are using a Promise library other than native, set it through fetch.Promise:\r\n```js\r\nconst Bluebird = require('bluebird');\r\n\r\nfetch.Promise = Bluebird;\r\n```\r\n\r\n## Common Usage\r\n\r\nNOTE: The documentation below is up-to-date with `2.x` releases, [see `1.x` readme](https://github.com/bitinn/node-fetch/blob/1.x/README.md), [changelog](https://github.com/bitinn/node-fetch/blob/1.x/CHANGELOG.md) and [2.x upgrade guide](UPGRADE-GUIDE.md) for the differences.\r\n\r\n#### Plain text or HTML\r\n```js\r\nfetch('https://github.com/')\r\n    .then(res => res.text())\r\n    .then(body => console.log(body));\r\n```\r\n\r\n#### JSON\r\n\r\n```js\r\n\r\nfetch('https://api.github.com/users/github')\r\n    .then(res => res.json())\r\n    .then(json => console.log(json));\r\n```\r\n\r\n#### Simple Post\r\n```js\r\nfetch('https://httpbin.org/post', { method: 'POST', body: 'a=1' })\r\n    .then(res => res.json()) // expecting a json response\r\n    .then(json => console.log(json));\r\n```\r\n\r\n#### Post with JSON\r\n\r\n```js\r\nconst body = { a: 1 };\r\n\r\nfetch('https://httpbin.org/post', {\r\n        method: 'post',\r\n        body:    JSON.stringify(body),\r\n        headers: { 'Content-Type': 'application/json' },\r\n    })\r\n    .then(res => res.json())\r\n    .then(json => console.log(json));\r\n```\r\n\r\n#### Post with form parameters\r\n`URLSearchParams` is available in Node.js as of v7.5.0. See [official documentation](https://nodejs.org/api/url.html#url_class_urlsearchparams) for more usage methods.\r\n\r\nNOTE: The `Content-Type` header is only set automatically to `x-www-form-urlencoded` when an instance of `URLSearchParams` is given as such:\r\n\r\n```js\r\nconst { URLSearchParams } = require('url');\r\n\r\nconst params = new URLSearchParams();\r\nparams.append('a', 1);\r\n\r\nfetch('https://httpbin.org/post', { method: 'POST', body: params })\r\n    .then(res => res.json())\r\n    .then(json => console.log(json));\r\n```\r\n\r\n#### Handling exceptions\r\nNOTE: 3xx-5xx responses are *NOT* exceptions, and should be handled in `then()`, see the next section.\r\n\r\nAdding a catch to the fetch promise chain will catch *all* exceptions, such as errors originating from node core libraries, like network errors, and operational errors which are instances of FetchError. See the [error handling document](ERROR-HANDLING.md)  for more details.\r\n\r\n```js\r\nfetch('https://domain.invalid/')\r\n    .catch(err => console.error(err));\r\n```\r\n\r\n#### Handling client and server errors\r\nIt is common to create a helper function to check that the response contains no client (4xx) or server (5xx) error responses:\r\n\r\n```js\r\nfunction checkStatus(res) {\r\n    if (res.ok) { // res.status >= 200 && res.status < 300\r\n        return res;\r\n    } else {\r\n        throw MyCustomError(res.statusText);\r\n    }\r\n}\r\n\r\nfetch('https://httpbin.org/status/400')\r\n    .then(checkStatus)\r\n    .then(res => console.log('will not get here...'))\r\n```\r\n\r\n## Advanced Usage\r\n\r\n#### Streams\r\nThe \"Node.js way\" is to use streams when possible:\r\n\r\n```js\r\nfetch('https://assets-cdn.github.com/images/modules/logos_page/Octocat.png')\r\n    .then(res => {\r\n        const dest = fs.createWriteStream('./octocat.png');\r\n        res.body.pipe(dest);\r\n    });\r\n```\r\n\r\n#### Buffer\r\nIf you prefer to cache binary data in full, use buffer(). (NOTE: buffer() is a `node-fetch` only API)\r\n\r\n```js\r\nconst fileType = require('file-type');\r\n\r\nfetch('https://assets-cdn.github.com/images/modules/logos_page/Octocat.png')\r\n    .then(res => res.buffer())\r\n    .then(buffer => fileType(buffer))\r\n    .then(type => { /* ... */ });\r\n```\r\n\r\n#### Accessing Headers and other Meta data\r\n```js\r\nfetch('https://github.com/')\r\n    .then(res => {\r\n        console.log(res.ok);\r\n        console.log(res.status);\r\n        console.log(res.statusText);\r\n        console.log(res.headers.raw());\r\n        console.log(res.headers.get('content-type'));\r\n    });\r\n```\r\n\r\n#### Extract Set-Cookie Header\r\n\r\nUnlike browsers, you can access raw `Set-Cookie` headers manually using `Headers.raw()`, this is a `node-fetch` only API.\r\n\r\n```js\r\nfetch(url).then(res => {\r\n    // returns an array of values, instead of a string of comma-separated values\r\n    console.log(res.headers.raw()['set-cookie']);\r\n});\r\n```\r\n\r\n#### Post data using a file stream\r\n\r\n```js\r\nconst { createReadStream } = require('fs');\r\n\r\nconst stream = createReadStream('input.txt');\r\n\r\nfetch('https://httpbin.org/post', { method: 'POST', body: stream })\r\n    .then(res => res.json())\r\n    .then(json => console.log(json));\r\n```\r\n\r\n#### Post with form-data (detect multipart)\r\n\r\n```js\r\nconst FormData = require('form-data');\r\n\r\nconst form = new FormData();\r\nform.append('a', 1);\r\n\r\nfetch('https://httpbin.org/post', { method: 'POST', body: form })\r\n    .then(res => res.json())\r\n    .then(json => console.log(json));\r\n\r\n// OR, using custom headers\r\n// NOTE: getHeaders() is non-standard API\r\n\r\nconst form = new FormData();\r\nform.append('a', 1);\r\n\r\nconst options = {\r\n    method: 'POST',\r\n    body: form,\r\n    headers: form.getHeaders()\r\n}\r\n\r\nfetch('https://httpbin.org/post', options)\r\n    .then(res => res.json())\r\n    .then(json => console.log(json));\r\n```\r\n\r\n#### Request cancellation with AbortSignal\r\n\r\n> NOTE: You may only cancel streamed requests on Node >= v8.0.0\r\n\r\nYou may cancel requests with `AbortController`. A suggested implementation is [`abort-controller`](https://www.npmjs.com/package/abort-controller).\r\n\r\nAn example of timing out a request after 150ms could be achieved as follows:\r\n\r\n```js\r\nimport AbortController from 'abort-controller';\r\n\r\nconst controller = new AbortController();\r\nconst timeout = setTimeout(\r\n  () => { controller.abort(); },\r\n  150,\r\n);\r\n\r\nfetch(url, { signal: controller.signal })\r\n  .then(res => res.json())\r\n  .then(\r\n    data => {\r\n      useData(data)\r\n    },\r\n    err => {\r\n      if (err.name === 'AbortError') {\r\n        // request was aborted\r\n      }\r\n    },\r\n  )\r\n  .finally(() => {\r\n    clearTimeout(timeout);\r\n  });\r\n```\r\n\r\nSee [test cases](https://github.com/bitinn/node-fetch/blob/master/test/test.js) for more examples.\r\n\r\n\r\n## API\r\n\r\n### fetch(url[, options])\r\n\r\n- `url` A string representing the URL for fetching\r\n- `options` [Options](#fetch-options) for the HTTP(S) request\r\n- Returns: <code>Promise&lt;[Response](#class-response)&gt;</code>\r\n\r\nPerform an HTTP(S) fetch.\r\n\r\n`url` should be an absolute url, such as `https://example.com/`. A path-relative URL (`/file/under/root`) or protocol-relative URL (`//can-be-http-or-https.com/`) will result in a rejected promise.\r\n\r\n<a id=\"fetch-options\"></a>\r\n### Options\r\n\r\nThe default values are shown after each option key.\r\n\r\n```js\r\n{\r\n    // These properties are part of the Fetch Standard\r\n    method: 'GET',\r\n    headers: {},        // request headers. format is the identical to that accepted by the Headers constructor (see below)\r\n    body: null,         // request body. can be null, a string, a Buffer, a Blob, or a Node.js Readable stream\r\n    redirect: 'follow', // set to `manual` to extract redirect headers, `error` to reject redirect\r\n    signal: null,       // pass an instance of AbortSignal to optionally abort requests\r\n\r\n    // The following properties are node-fetch extensions\r\n    follow: 20,         // maximum redirect count. 0 to not follow redirect\r\n    timeout: 0,         // req/res timeout in ms, it resets on redirect. 0 to disable (OS limit applies). Signal is recommended instead.\r\n    compress: true,     // support gzip/deflate content encoding. false to disable\r\n    size: 0,            // maximum response body size in bytes. 0 to disable\r\n    agent: null         // http(s).Agent instance or function that returns an instance (see below)\r\n}\r\n```\r\n\r\n##### Default Headers\r\n\r\nIf no values are set, the following request headers will be sent automatically:\r\n\r\nHeader              | Value\r\n------------------- | --------------------------------------------------------\r\n`Accept-Encoding`   | `gzip,deflate` _(when `options.compress === true`)_\r\n`Accept`            | `*/*`\r\n`Connection`        | `close` _(when no `options.agent` is present)_\r\n`Content-Length`    | _(automatically calculated, if possible)_\r\n`Transfer-Encoding` | `chunked` _(when `req.body` is a stream)_\r\n`User-Agent`        | `node-fetch/1.0 (+https://github.com/bitinn/node-fetch)`\r\n\r\nNote: when `body` is a `Stream`, `Content-Length` is not set automatically.\r\n\r\n##### Custom Agent\r\n\r\nThe `agent` option allows you to specify networking related options that's out of the scope of Fetch. Including and not limit to:\r\n\r\n- Support self-signed certificate\r\n- Use only IPv4 or IPv6\r\n- Custom DNS Lookup\r\n\r\nSee [`http.Agent`](https://nodejs.org/api/http.html#http_new_agent_options) for more information.\r\n\r\nIn addition, `agent` option accepts a function that returns http(s).Agent instance given current [URL](https://nodejs.org/api/url.html), this is useful during a redirection chain across HTTP and HTTPS protocol.\r\n\r\n```js\r\nconst httpAgent = new http.Agent({\r\n    keepAlive: true\r\n});\r\nconst httpsAgent = new https.Agent({\r\n    keepAlive: true\r\n});\r\n\r\nconst options = {\r\n    agent: function (_parsedURL) {\r\n        if (_parsedURL.protocol == 'http:') {\r\n            return httpAgent;\r\n        } else {\r\n            return httpsAgent;\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n<a id=\"class-request\"></a>\r\n### Class: Request\r\n\r\nAn HTTP(S) request containing information about URL, method, headers, and the body. This class implements the [Body](#iface-body) interface.\r\n\r\nDue to the nature of Node.js, the following properties are not implemented at this moment:\r\n\r\n- `type`\r\n- `destination`\r\n- `referrer`\r\n- `referrerPolicy`\r\n- `mode`\r\n- `credentials`\r\n- `cache`\r\n- `integrity`\r\n- `keepalive`\r\n\r\nThe following node-fetch extension properties are provided:\r\n\r\n- `follow`\r\n- `compress`\r\n- `counter`\r\n- `agent`\r\n\r\nSee [options](#fetch-options) for exact meaning of these extensions.\r\n\r\n#### new Request(input[, options])\r\n\r\n<small>*(spec-compliant)*</small>\r\n\r\n- `input` A string representing a URL, or another `Request` (which will be cloned)\r\n- `options` [Options][#fetch-options] for the HTTP(S) request\r\n\r\nConstructs a new `Request` object. The constructor is identical to that in the [browser](https://developer.mozilla.org/en-US/docs/Web/API/Request/Request).\r\n\r\nIn most cases, directly `fetch(url, options)` is simpler than creating a `Request` object.\r\n\r\n<a id=\"class-response\"></a>\r\n### Class: Response\r\n\r\nAn HTTP(S) response. This class implements the [Body](#iface-body) interface.\r\n\r\nThe following properties are not implemented in node-fetch at this moment:\r\n\r\n- `Response.error()`\r\n- `Response.redirect()`\r\n- `type`\r\n- `trailer`\r\n\r\n#### new Response([body[, options]])\r\n\r\n<small>*(spec-compliant)*</small>\r\n\r\n- `body` A string or [Readable stream][node-readable]\r\n- `options` A [`ResponseInit`][response-init] options dictionary\r\n\r\nConstructs a new `Response` object. The constructor is identical to that in the [browser](https://developer.mozilla.org/en-US/docs/Web/API/Response/Response).\r\n\r\nBecause Node.js does not implement service workers (for which this class was designed), one rarely has to construct a `Response` directly.\r\n\r\n#### response.ok\r\n\r\n<small>*(spec-compliant)*</small>\r\n\r\nConvenience property representing if the request ended normally. Will evaluate to true if the response status was greater than or equal to 200 but smaller than 300.\r\n\r\n#### response.redirected\r\n\r\n<small>*(spec-compliant)*</small>\r\n\r\nConvenience property representing if the request has been redirected at least once. Will evaluate to true if the internal redirect counter is greater than 0.\r\n\r\n<a id=\"class-headers\"></a>\r\n### Class: Headers\r\n\r\nThis class allows manipulating and iterating over a set of HTTP headers. All methods specified in the [Fetch Standard][whatwg-fetch] are implemented.\r\n\r\n#### new Headers([init])\r\n\r\n<small>*(spec-compliant)*</small>\r\n\r\n- `init` Optional argument to pre-fill the `Headers` object\r\n\r\nConstruct a new `Headers` object. `init` can be either `null`, a `Headers` object, an key-value map object, or any iterable object.\r\n\r\n```js\r\n// Example adapted from https://fetch.spec.whatwg.org/#example-headers-class\r\n\r\nconst meta = {\r\n  'Content-Type': 'text/xml',\r\n  'Breaking-Bad': '<3'\r\n};\r\nconst headers = new Headers(meta);\r\n\r\n// The above is equivalent to\r\nconst meta = [\r\n  [ 'Content-Type', 'text/xml' ],\r\n  [ 'Breaking-Bad', '<3' ]\r\n];\r\nconst headers = new Headers(meta);\r\n\r\n// You can in fact use any iterable objects, like a Map or even another Headers\r\nconst meta = new Map();\r\nmeta.set('Content-Type', 'text/xml');\r\nmeta.set('Breaking-Bad', '<3');\r\nconst headers = new Headers(meta);\r\nconst copyOfHeaders = new Headers(headers);\r\n```\r\n\r\n<a id=\"iface-body\"></a>\r\n### Interface: Body\r\n\r\n`Body` is an abstract interface with methods that are applicable to both `Request` and `Response` classes.\r\n\r\nThe following methods are not yet implemented in node-fetch at this moment:\r\n\r\n- `formData()`\r\n\r\n#### body.body\r\n\r\n<small>*(deviation from spec)*</small>\r\n\r\n* Node.js [`Readable` stream][node-readable]\r\n\r\nThe data encapsulated in the `Body` object. Note that while the [Fetch Standard][whatwg-fetch] requires the property to always be a WHATWG `ReadableStream`, in node-fetch it is a Node.js [`Readable` stream][node-readable].\r\n\r\n#### body.bodyUsed\r\n\r\n<small>*(spec-compliant)*</small>\r\n\r\n* `Boolean`\r\n\r\nA boolean property for if this body has been consumed. Per spec, a consumed body cannot be used again.\r\n\r\n#### body.arrayBuffer()\r\n#### body.blob()\r\n#### body.json()\r\n#### body.text()\r\n\r\n<small>*(spec-compliant)*</small>\r\n\r\n* Returns: <code>Promise</code>\r\n\r\nConsume the body and return a promise that will resolve to one of these formats.\r\n\r\n#### body.buffer()\r\n\r\n<small>*(node-fetch extension)*</small>\r\n\r\n* Returns: <code>Promise&lt;Buffer&gt;</code>\r\n\r\nConsume the body and return a promise that will resolve to a Buffer.\r\n\r\n#### body.textConverted()\r\n\r\n<small>*(node-fetch extension)*</small>\r\n\r\n* Returns: <code>Promise&lt;String&gt;</code>\r\n\r\nIdentical to `body.text()`, except instead of always converting to UTF-8, encoding sniffing will be performed and text converted to UTF-8, if possible.\r\n\r\n(This API requires an optional dependency on npm package [encoding](https://www.npmjs.com/package/encoding), which you need to install manually. `webpack` users may see [a warning message](https://github.com/bitinn/node-fetch/issues/412#issuecomment-379007792) due to this optional dependency.)\r\n\r\n<a id=\"class-fetcherror\"></a>\r\n### Class: FetchError\r\n\r\n<small>*(node-fetch extension)*</small>\r\n\r\nAn operational error in the fetching process. See [ERROR-HANDLING.md][] for more info.\r\n\r\n<a id=\"class-aborterror\"></a>\r\n### Class: AbortError\r\n\r\n<small>*(node-fetch extension)*</small>\r\n\r\nAn Error thrown when the request is aborted in response to an `AbortSignal`'s `abort` event. It has a `name` property of `AbortError`. See [ERROR-HANDLING.MD][] for more info.\r\n\r\n## Acknowledgement\r\n\r\nThanks to [github/fetch](https://github.com/github/fetch) for providing a solid implementation reference.\r\n\r\n`node-fetch` v1 was maintained by [@bitinn](https://github.com/bitinn); v2 was maintained by [@TimothyGu](https://github.com/timothygu), [@bitinn](https://github.com/bitinn) and [@jimmywarting](https://github.com/jimmywarting); v2 readme is written by [@jkantr](https://github.com/jkantr).\r\n\r\n## License\r\n\r\nMIT\r\n\r\n[npm-image]: https://flat.badgen.net/npm/v/node-fetch\r\n[npm-url]: https://www.npmjs.com/package/node-fetch\r\n[travis-image]: https://flat.badgen.net/travis/bitinn/node-fetch\r\n[travis-url]: https://travis-ci.org/bitinn/node-fetch\r\n[codecov-image]: https://flat.badgen.net/codecov/c/github/bitinn/node-fetch/master\r\n[codecov-url]: https://codecov.io/gh/bitinn/node-fetch\r\n[install-size-image]: https://flat.badgen.net/packagephobia/install/node-fetch\r\n[install-size-url]: https://packagephobia.now.sh/result?p=node-fetch\r\n[whatwg-fetch]: https://fetch.spec.whatwg.org/\r\n[response-init]: https://fetch.spec.whatwg.org/#responseinit\r\n[node-readable]: https://nodejs.org/api/stream.html#stream_readable_streams\r\n[mdn-headers]: https://developer.mozilla.org/en-US/docs/Web/API/Headers\r\n[LIMITS.md]: https://github.com/bitinn/node-fetch/blob/master/LIMITS.md\r\n[ERROR-HANDLING.md]: https://github.com/bitinn/node-fetch/blob/master/ERROR-HANDLING.md\r\n[UPGRADE-GUIDE.md]: https://github.com/bitinn/node-fetch/blob/master/UPGRADE-GUIDE.md\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bitinn/node-fetch.git"
  },
  "scripts": {
    "build": "cross-env BABEL_ENV=rollup rollup -c",
    "coverage": "cross-env BABEL_ENV=coverage nyc --reporter json --reporter text mocha -R spec test/test.js && codecov -f coverage/coverage-final.json",
    "prepare": "npm run build",
    "report": "cross-env BABEL_ENV=coverage nyc --reporter lcov --reporter text mocha -R spec test/test.js",
    "test": "cross-env BABEL_ENV=test mocha --require babel-register --throw-deprecation test/test.js"
  },
  "version": "2.6.0"
}
